// wmlab/backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

// User Management
model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String
  name            String?
  role            Role
  isActive        Boolean   @default(true)
  lastLogin       DateTime?
  profileImage    String?
  phone           String?
  department      Department? @relation(fields: [departmentId], references: [id])
  departmentId    String?
  warehouse       Warehouse?  @relation(fields: [warehouseId], references: [id])
  warehouseId     String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  sessions        Session[]
  queries         Query[]
  feedback        Feedback[]
  uploadedDocuments Document[] @relation("UploadedDocuments")
  
  @@index([email])
  @@index([role])
  @@index([warehouseId])
}

enum Role {
  Admin
  Expert
  Worker
}

model Session {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  @@index([token])
  @@index([userId])
}

// Warehouse & Department
model Warehouse {
  id          String   @id @default(uuid())
  name        String
  code        String   @unique
  location    String?
  isActive    Boolean  @default(true)
  metadata    Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  users       User[]
  departments Department[]
  documents   Document[]
  equipment   Equipment[]
  
  @@index([code])
}

model Department {
  id          String   @id @default(uuid())
  name        String
  code        String   
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  users       User[]
  documents   Document[]
  
  @@unique([code, warehouseId])
  @@index([warehouseId])
}

// Document Management
model Document {
  id              String   @id @default(uuid())
  title           String
  description     String?
  category        String   // SOPs, Safety, Equipment, Training, Reports, Other
  filename        String
  originalName    String
  mimeType        String
  size            BigInt
  path            String
  language        String   @default("en") // en, ar, de
  isPublic        Boolean  @default(false)
  
  uploadedById    String
  uploadedBy      User     @relation("UploadedDocuments", fields: [uploadedById], references: [id])
  warehouseId     String
  warehouse       Warehouse @relation(fields: [warehouseId], references: [id])
  departmentId    String?
  department      Department? @relation(fields: [departmentId], references: [id])
  
  status          String   @default("pending") // pending, processing, completed, failed
  processingProgress Int?
  processingError String?
  extractedText   String?  // Preview of extracted text
  metadata        Json?    // Additional metadata (tags, etc.)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  chunks          Chunk[]
  
  @@index([warehouseId])
  @@index([category])
  @@index([status])
  @@index([uploadedById])
}

// Document Chunks
model Chunk {
  id          String   @id @default(uuid())
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  content     String   @db.Text
  chunkIndex  Int
  tokenCount  Int
  metadata    Json?    // page number, section, type, etc.
  
  createdAt   DateTime @default(now())
  
  embeddings  Embedding[]
  
  @@index([documentId])
  @@index([chunkIndex])
}

// Vector Embeddings
model Embedding {
  id          String   @id @default(uuid())
  chunkId     String
  chunk       Chunk    @relation(fields: [chunkId], references: [id], onDelete: Cascade)
  embedding   Unsupported("vector")?
  model       String   // embedding model used
  dimensions  Int
  
  createdAt   DateTime @default(now())
  
  @@index([chunkId])
}

// Equipment Management
model Equipment {
  id          String   @id @default(uuid())
  name        String
  code        String
  type        String   // Forklift, Conveyor, Scanner, etc.
  manufacturer String?
  model       String?
  serialNumber String?
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  status      String   @default("operational") // operational, maintenance, faulty
  metadata    Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  errorCodes  ErrorCode[]
  maintenanceLogs MaintenanceLog[]
  
  @@unique([code, warehouseId])
  @@index([warehouseId])
  @@index([status])
}

// Error Codes Database
model ErrorCode {
  id          String   @id @default(uuid())
  code        String
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  description String   @db.Text
  solution    String   @db.Text
  severity    String   // low, medium, high, critical
  category    String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([code, equipmentId])
  @@index([equipmentId])
  @@index([severity])
}

// Maintenance Logs
model MaintenanceLog {
  id          String   @id @default(uuid())
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  type        String   // preventive, corrective, inspection
  description String   @db.Text
  performedBy String?
  scheduledAt DateTime?
  completedAt DateTime?
  status      String   @default("scheduled") // scheduled, in_progress, completed
  notes       String?  @db.Text
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([equipmentId])
  @@index([status])
  @@index([scheduledAt])
}

// Query & Search
model Query {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  query       String   @db.Text
  response    String?  @db.Text
  context     Json?    // Retrieved chunks, metadata
  duration    Int?     // Response time in ms
  successful  Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  
  feedback    Feedback?
  
  @@index([userId])
  @@index([createdAt])
}

// Feedback System
model Feedback {
  id          String   @id @default(uuid())
  queryId     String   @unique
  query       Query    @relation(fields: [queryId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  rating      Int      // 1-5 stars
  helpful     Boolean?
  comment     String?  @db.Text
  
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([rating])
}