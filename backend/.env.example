# wmlab/backend/.env.example
# Database
DATABASE_URL="postgresql://user:password@localhost:5432/wmlab?schema=public"

# Redis
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# JWT
JWT_SECRET=your-super-secret-jwt-key-change-this
JWT_REFRESH_SECRET=your-refresh-secret-key-change-this
JWT_EXPIRES_IN=15m
JWT_REFRESH_EXPIRES_IN=7d

# OpenAI
OPENAI_API_KEY=sk-your-openai-api-key
EMBEDDING_MODEL=text-embedding-3-small
AI_MODEL=gpt-4-turbo-preview

# Alternative: Cohere (if using instead of OpenAI)
COHERE_API_KEY=your-cohere-api-key

# Server
PORT=5000
NODE_ENV=development

# Frontend URL (for CORS)
FRONTEND_URL=http://localhost:3000

# File Upload
MAX_FILE_SIZE=52428800
UPLOAD_DIR=./uploads

# Rate Limiting
RATE_LIMIT_WINDOW=15
RATE_LIMIT_MAX=100

# wmlab/docker-compose.yml
version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg15
    container_name: wmlab-postgres
    environment:
      POSTGRES_DB: wmlab
      POSTGRES_USER: wmlabuser
      POSTGRES_PASSWORD: wmlabpass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - wmlab-network

  redis:
    image: redis:7-alpine
    container_name: wmlab-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wmlab-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: wmlab-backend
    ports:
      - "5000:5000"
    environment:
      DATABASE_URL: postgresql://wmlabuser:wmlabpass@postgres:5432/wmlab?schema=public
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
      - uploads:/app/uploads
    networks:
      - wmlab-network
    command: npm run dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: wmlab-frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5000
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - wmlab-network
    command: npm run dev

  queue-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: wmlab-queue-worker
    environment:
      DATABASE_URL: postgresql://wmlabuser:wmlabpass@postgres:5432/wmlab?schema=public
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
      - uploads:/app/uploads
    networks:
      - wmlab-network
    command: npm run worker

volumes:
  postgres_data:
  redis_data:
  uploads:

networks:
  wmlab-network:
    driver: bridge

# wmlab/backend/Dockerfile
FROM node:18-alpine

WORKDIR /app

# Install dependencies for native modules
RUN apk add --no-cache python3 make g++

# Copy package files
COPY package*.json ./
COPY prisma ./prisma/

# Install dependencies
RUN npm ci

# Generate Prisma client
RUN npx prisma generate

# Copy source code
COPY . .

# Build TypeScript
RUN npm run build

EXPOSE 5000

CMD ["npm", "start"]

# wmlab/frontend/Dockerfile
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy source code
COPY . .

# Build Next.js
RUN npm run build

EXPOSE 3000

CMD ["npm", "start"]

# wmlab/backend/package.json
{
  "name": "wmlab-backend",
  "version": "1.0.0",
  "description": "AI WMS Assistant Backend",
  "main": "dist/index.js",
  "scripts": {
    "dev": "nodemon src/index.ts",
    "build": "tsc",
    "start": "node dist/index.js",
    "worker": "nodemon src/workers/queueWorker.ts",
    "prisma:generate": "prisma generate",
    "prisma:migrate": "prisma migrate dev",
    "prisma:seed": "ts-node prisma/seed.ts",
    "test": "jest"
  },
  "dependencies": {
    "@prisma/client": "^5.7.0",
    "bcryptjs": "^2.4.3",
    "bull": "^4.11.5",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "express-rate-limit": "^7.1.5",
    "ioredis": "^5.3.2",
    "jsonwebtoken": "^9.0.2",
    "lodash": "^4.17.21",
    "mammoth": "^1.6.0",
    "multer": "^1.4.5-lts.1",
    "openai": "^4.24.1",
    "pdf-parse": "^1.1.1",
    "tesseract.js": "^5.0.4",
    "winston": "^3.11.0",
    "xlsx": "^0.18.5",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.6",
    "@types/bull": "^4.10.0",
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/jsonwebtoken": "^9.0.5",
    "@types/lodash": "^4.14.202",
    "@types/multer": "^1.4.11",
    "@types/node": "^20.10.5",
    "@types/pdf-parse": "^1.1.4",
    "nodemon": "^3.0.2",
    "prisma": "^5.7.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.3.3"
  }
}

# wmlab/frontend/package.json
{
  "name": "wmlab-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-accordion": "^1.1.2",
    "@radix-ui/react-alert-dialog": "^1.0.5",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-progress": "^1.0.3",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-tabs": "^1.0.4",
    "@radix-ui/react-toast": "^1.1.5",
    "@tanstack/react-query": "^5.13.4",
    "axios": "^1.6.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "date-fns": "^3.0.0",
    "lucide-react": "^0.294.0",
    "next": "14.0.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-dropzone": "^14.2.3",
    "recharts": "^2.10.3",
    "tailwind-merge": "^2.2.0",
    "tailwindcss-animate": "^1.0.7",
    "zustand": "^4.4.7"
  },
  "devDependencies": {
    "@types/node": "^20.10.5",
    "@types/react": "^18.2.45",
    "@types/react-dom": "^18.2.18",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.56.0",
    "eslint-config-next": "14.0.4",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.4.0",
    "typescript": "^5.3.3"
  }
}

# wmlab/Makefile
# Makefile for AI WMS Assistant

.PHONY: help install dev build start stop clean test

help:
	@echo "Available commands:"
	@echo "  install    - Install all dependencies"
	@echo "  dev        - Start development environment"
	@echo "  build      - Build production images"
	@echo "  start      - Start production environment"
	@echo "  stop       - Stop all services"
	@echo "  clean      - Clean up containers and volumes"
	@echo "  test       - Run tests"

install:
	cd backend && npm install
	cd frontend && npm install

dev:
	docker-compose up -d postgres redis
	cd backend && npm run dev &
	cd frontend && npm run dev &
	cd backend && npm run worker

build:
	docker-compose build

start:
	docker-compose up -d

stop:
	docker-compose down

clean:
	docker-compose down -v
	rm -rf backend/node_modules
	rm -rf frontend/node_modules
	rm -rf backend/dist
	rm -rf frontend/.next

test:
	cd backend && npm test
	cd frontend && npm test

migrate:
	cd backend && npx prisma migrate dev

seed:
	cd backend && npm run prisma:seed